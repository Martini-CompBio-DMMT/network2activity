genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- filter(dataf, dataf[, 1] == g)
df2 <- filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
df_list
}
interactors <- getInteractorsList(network_df, regulators_list)
View(interactors)
View(interactors)
View(interactors)
regulators_list
regulators_list <- read.table("C:/Users/franc/OneDrive/Desktop/Tirocinio/regulators-list.txt", header = T)
regulators_list <- (regulators_list[, 3])
regulators_list <- c(regulators_list, "ADAR", "ADARB1", "ADARB2")
interactors <- getInteractorsList(network_df, regulators_list)
interactors
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
}
writeAdjFile(interactors)
writeAdjFile(interactors, file_name = "int.txt")
save(regulators_list, file = "C:/Users/franc/OneDrive/Documenti/network2activity/data/regulators_list.rda", compress = "xz")
current.node = as.package("network2activity")
load("~/network2activity/data/regulators_list.rda")
document(current.node)
rm(list = c("getInteractorsList", "inferenceWithYourSignature", "writeAdjFile"))
document(current.node)
aa <- writeAdjFile(interactors, file_name = "int.txt")
aa
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
a <- read.table(file_name)
a
}
aa <- writeAdjFile(interactors, file_name = "int.txt")
aa <- writeAdjFile(interactors, file_name = "int")
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
a <- read.table(paste0(file_name, ".adj"))
a
}
aa <- writeAdjFile(interactors, file_name = "int")
paste0("file_name", ".adj")
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
a <- readLines(paste0("file_name", ".adj"))
a
}
aa <- writeAdjFile(interactors, file_name = "int")
readLines("int.adj")
read.table("int.adj")
read.table("int.adj", header= F)
read.table("int.adj", header= F, sep = "\t")
aa <- readLines("int.adj")
aa
aa <- readLines(paste0(file_name, ".adj"))
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
aa <- readLines(paste0(file_name, ".adj"))
aa
}
aa <- writeAdjFile(interactors, file_name = "int")
aa
inferenceWithYourSignature <- function(adjfile, mat) {
regul <- aracne2regulon(adjfile, mat, verbose = FALSE)
vpres <- viper(mat, regul, verbose = FALSE)
vpres
}
inferenceWithYourSignature(aa, vsd_matrix)
aa <- read.table("int.adj", sep = "\t")
aa <- read.table(file = "int.adj", sep = "\t")
writeLines(modified_file, adj_file)
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
file_adj
}
aa <- writeAdjFile(interactors, file_name = "int")
aa
inferenceWithYourSignature <- function(adjfile, mat) {
regul <- aracne2regulon(adjfile, mat, verbose = FALSE)
vpres <- viper(mat, regul, verbose = FALSE)
vpres
}
inferenceWithYourSignature(aa, vsd_matrix)
aa
library(viper)
inferenceWithYourSignature(aa, vsd_matrix)
aracne2regulon(aa, mat, verbose = FALSE)
aracne2regulon(aa, vsd_matrix, verbose = FALSE)
re <- aracne2regulon(aa, vsd_matrix, verbose = FALSE)
vpres <- viper(vsd_matrix, re, verbose = FALSE)
View(re)
View(re)
re
re$ADAM22
interactors <- getInteractorsList(network_df, regulators_list)
aa <- writeAdjFile(interactors, file_name = "int")
re <- aracne2regulon(aa, vsd_matrix, verbose = FALSE)
re
vpres <- viper(vsd_matrix, re, verbose = FALSE)
load("~/network_df.rda")
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = network_df$from,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
network_df
network_df <- readRDS("network_df.rda")
getwd()
net <- readRDS("C:/Users/franc/OneDrive/Documenti/network_df.rda")
load("C:/Users/franc/OneDrive/Documenti/network_df.rda")
View(network_df)
load("C:/Users/franc/OneDrive/Documenti/net.rda")
net
load("C:/Users/franc/OneDrive/Documenti/net.rda")
net
load("~/net.rda")
load("C:/Users/franc/OneDrive/Documenti/net.rda")
load("C:/Users/franc/OneDrive/Documenti/net.rda")
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = df$from,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
library(AnnotationDbi)
library(org.Hs.eg.db)
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = df$from,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
df$from <- genes$SYMBOL[match(df$from,
genes$ENSEMBL)]
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = network_df$to,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = df$to,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
df$to <- genes$SYMBOL[match(df$to,
genes$ENSEMBL)]
df <- na.omit(df)
df
interactors <- getInteractorsList(df, regulators_list)
getInteractorsList <- function(dataf, reg_list) {
genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- filter(dataf, dataf[, 1] == g)
df2 <- filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
df_list
}
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
file_adj
}
inferenceWithYourSignature <- function(adjfile, mat) {
regul <- aracne2regulon(adjfile, mat, verbose = FALSE)
vpres <- viper(mat, regul, verbose = FALSE)
vpres
}
aa <- writeAdjFile(interactors, file_name = "int")
interactors <- getInteractorsList(df, regulators_list)
regulators_list <- read.table("C:/Users/franc/OneDrive/Desktop/Tirocinio/regulators-list.txt", header = T)
regulators_list <- head(regulators_list)
regulators_list <- (regulators_list[, 3])
regulators_list <- c(regulators_list, "ADAR", "ADARB1", "ADARB2")
interactors <- getInteractorsList(df, regulators_list)
aa <- writeAdjFile(interactors, file_name = "int")
re <- aracne2regulon(aa, vsd_matrix, verbose = FALSE)
library(viper)
re <- aracne2regulon(aa, vsd_matrix, verbose = FALSE)
aa
interactors
load("C:/Users/franc/OneDrive/Documenti/net.rda")
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = df$from,
columns = c("SYMBOL"),
keytype = "ENTREZID")
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = df$from,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
genes
df$from <- genes$SYMBOL[match(df$from,
genes$ENSEMBL)]
df
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = df$to,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
df$to <- genes$SYMBOL[match(df$to,
genes$ENSEMBL)]
df <- na.omit(df)
df
interactors <- getInteractorsList(df, regulators_list)
interactors
df
df <- as.data.frame(df)
df
interactors <- getInteractorsList(df, regulators_list)
interactors
network_df
load("~/network2activity/data/network_df.rda")
View(network_df)
View(df)
interactors <- getInteractorsList(network_df, regulators_list)
interactors
library(dplyr)
interactors <- getInteractorsList(network_df, regulators_list)
interactors
interactors <- getInteractorsList(df, regulators_list)
interactors
aa <- writeAdjFile(interactors, file_name = "int")
re <- aracne2regulon(aa, vsd_matrix, verbose = FALSE)
vpres <- viper(vsd_matrix, re, verbose = FALSE)
vpres
interactors <- getInteractorsList(network_df, regulators_list)
aa <- writeAdjFile(interactors, file_name = "int")
getwd()
setwd("C:/Users/franc/OneDrive/Documenti")
aa <- writeAdjFile(interactors, file_name = "int")
re <- aracne2regulon(aa, vsd_matrix, verbose = FALSE)
interactors <- getInteractorsList(network_df, regulators_list)
aa <- writeAdjFile(interactors, file_name = "int")
re <- aracne2regulon(aa, vsd_matrix, verbose = FALSE)
library(devtools)
current.node = as.package("network2activity")
getwd()
setwd("C:/Users/franc/OneDrive/Documenti")
current.node = as.package("network2activity")
load_all(current.node$path)
document(current.node)
load("network_df.rda")
network_df <- df
save(network_df, file = "C:/Users/franc/OneDrive/Documenti/network2activity/data/network_df.rda")
current.node = as.package("network2activity")
load_all(current.node$path)
document(current.node)
getInteractorsList <- function(dataf, reg_list) {
genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- filter(dataf, dataf[, 1] == g)
df2 <- filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
df_list
}
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
file(file_txt, "w")
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
b <- write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
adj_file <- file_adj
modified_file <- gsub(" ", "\t", txt_file)
writeLines(modified_file, adj_file)
file_adj
}
inferenceWithYourSignature <- function(adjfile, mat) {
regul <- aracne2regulon(adjfile, mat, verbose = FALSE)
vpres <- viper(mat, regul, verbose = FALSE)
vpres
}
library("viper")
library(dplyr)
interactors <- getInteractorsList(network_df, regulators_list)
network_df
regulators_list
load("~/network2activity/data/network_df.rda")
View(df)
View(network_df)
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = network_df$from,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
library(AnnotationDbi)
library(org.Hs.eg.db)
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = network_df$from,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
network_df$from <- genes$SYMBOL[match(network_df$from,
genes$ENSEMBL)]
genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = network_df$to,
columns = c("SYMBOL"),
keytype = "ENSEMBL")
network_df$to <- genes$SYMBOL[match(network_df$to,
genes$ENSEMBL)]
network_df <- na.omit(network_df)
save(network_df, file = "C:/Users/franc/OneDrive/Documenti/network2activity/data/network_df.rda")
current.node = as.package("network2activity")
load_all(current.node$path)
rm(list = c("getInteractorsList", "inferenceWithYourSignature", "writeAdjFile"))
load_all(current.node$path)
document(current.node)
regul_A549_cells <- readRDS("C:/Users/franc/OneDrive/Desktop/Tirocinio/regulons/regulon_A549_cells.rds")
regul_A549_cells <- regul_A549_cells[c("ADAR", "ADARB1")]
#class(regul_A549_cells_reduced) <- "regulon"
library(viper)
viper(vsd_matrix, regul_A549_cells)
regul_A549_cells <- readRDS("C:/Users/franc/OneDrive/Desktop/Tirocinio/regulons/regulon_A549_cells.rds")
viper(vsd_matrix, regul_A549_cells)
regul_A549_cells_red <- regul_A549_cells[c("ADAR", "ADARB1")]
class(regul_A549_cells_red) <- "regulon"
viper(vsd_matrix, regul_A549_cells_red)
viper(vsd_matrix, regul_A549_cells[c("ADAR", "ADARB1")])
regul_hESC_neurons <- readRDS("C:/Users/franc/OneDrive/Desktop/Tirocinio/regulons/regulon_hesc_neurons.rds")
regul_hESC_neurons_red <- regul_hESC_neurons[c("ADAR", "ADARB1")]
viper(vsd_matrix, regul_hESC_neurons_red)
viper(vsd_matrix, regul_hESC_neurons)
regulators_of_interest <- c("ADAR", "ADARB1")
regul_A549_cells_red <- regul_A549_cells[names(regul_A549_cells) %in% regulators_of_interest]
regul_A549_cells_red
str(regul_A549_cells_red)
viper(vsd_matrix, regul_A549_cells_red)
class(wts)
?viper
viper
str(vsd_matrix)
regul_A549_cells <- lapply(regul_A549_cells, function(x) {
x$tfmode <- as.numeric(x$tfmode)
x$likelihood <- as.numeric(x$likelihood)
return(x)
})
regul_A549_cells
regul_A549_cells_red <- lapply(regul_A549_cells_red, function(x) {
x$tfmode <- as.numeric(x$tfmode)
x$likelihood <- as.numeric(x$likelihood)
return(x)
})
regul_A549_cells_red
vsd_matrix["ADAR",]
vsd_matrix["ADARB1",]
viper(vsd_matrix, regul_A549_cells_red, minsize = 5)
viper(vsd_matrix, regul_A549_cells_red, minsize = 1)
viper(vsd_matrix, regul_A549_cells_red, minsize = 0)
viper(vsd_matrix, regul_A549_cells_red, minsize = 1)
regul_A549_cells <- readRDS("C:/Users/franc/OneDrive/Desktop/Tirocinio/regulons/regulon_A549_cells.rds")
regul_A549_cells_red <- regul_A549_cells[names(regul_A549_cells) %in% regulators_of_interest]
viper(vsd_matrix, regul_A549_cells_red, minsize = 1)
viper(vsd_matrix, regul_A549_cells_red, minsize = 5)
viper(vsd_matrix, regul_hesc_neurons_red, minsize = 5)
regul_hESC_neurons_red <- regul_hESC_neurons[c("ADAR", "ADARB1")]
viper(vsd_matrix, regul_hesc_neurons_red, minsize = 5)
viper(vsd_matrix, regul_hESC_neurons_red, minsize = 5)
