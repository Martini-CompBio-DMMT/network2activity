}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt, row.names = F,
col.names = F, quote = F, append = T)
i = i+1
}
txt_file <- readLines(file_txt)
modified_file <- gsub(" ", "\t", txt_file)
file_adj <- file(file_adj, "w")
writeLines(modified_file, file_adj)
return(file_adj)
}
writeAdjFile(dl, "interactors")
writeAdjFile <- function(df_list, file_name = "") {
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i = 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt, row.names = FALSE,
col.names = FALSE, quote = FALSE, append = TRUE)
i = i+1
}
txt_file <- readLines(file_txt)
modified_file <- gsub(" ", "\t", txt_file)
file_adj <- file(file_adj, "w")
writeLines(modified_file, file_adj)
close(file_adj)
}
writeAdjFile(dl, "interactors")
inferenceWithYourSignature <- function(mat, net, reg_list, file_name = "") {
g  <- igraph::graph_from_adjacency_matrix(net, weighted=TRUE, mode="undirected")
dataf <- igraph::as_data_frame(g)
#genes <- AnnotationDbi::select(org.Hs.eg.db,
#                               keys = c(unique(dataf$to, dataf$from)),
#                               columns = c("SYMBOL"),
#                               keytype = "ENSEMBL")
#
#dataf$to <- genes$SYMBOL[match(dataf$to, genes$ENSEMBL)]
#dataf$from <- genes$SYMBOL[match(dataf$from, genes$ENSEMBL)]
#dataf <- na.omit(dataf)
print("Data frame from net ok")
genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- dplyr::filter(dataf, dataf[, 1] == g)
df2 <- dplyr::filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
print(length(df_list))
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i <- 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt, row.names = FALSE,
col.names = FALSE, quote = FALSE, append = TRUE)
i <- i+1
}
txt_file <- readLines(file_txt)
modified_file <- gsub(" ", "\t", txt_file)
file_adj <- file(file_adj, "w")
writeLines(modified_file, file_adj)
close(file_adj)
print("file created")
regul <- viper::aracne2regulon(adj_file, mat, verbose = FALSE)
vpres <- viper::viper(mat, regul, verbose = FALSE, minsize = 0)
return(vpres)
}
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
inferenceWithYourSignature <- function(mat, net, reg_list, file_name = "") {
g  <- igraph::graph_from_adjacency_matrix(net, weighted=TRUE, mode="undirected")
dataf <- igraph::as_data_frame(g)
#genes <- AnnotationDbi::select(org.Hs.eg.db,
#                               keys = c(unique(dataf$to, dataf$from)),
#                               columns = c("SYMBOL"),
#                               keytype = "ENSEMBL")
#
#dataf$to <- genes$SYMBOL[match(dataf$to, genes$ENSEMBL)]
#dataf$from <- genes$SYMBOL[match(dataf$from, genes$ENSEMBL)]
#dataf <- na.omit(dataf)
print("Data frame from net ok")
genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- dplyr::filter(dataf, dataf[, 1] == g)
df2 <- dplyr::filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
print(length(df_list))
file_txt <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt)) {
file.remove(file_txt)
}
if (file.exists(file_adj)) {
file.remove(file_adj)
}
i <- 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt, row.names = FALSE,
col.names = FALSE, quote = FALSE, append = TRUE)
i <- i+1
}
txt_file <- readLines(file_txt)
modified_file <- gsub(" ", "\t", txt_file)
file_adj <- file(file_adj, "w")
writeLines(modified_file, file_adj)
close(file_adj)
print("file created")
regul <- viper::aracne2regulon(file_adj, mat, verbose = FALSE)
vpres <- viper::viper(mat, regul, verbose = FALSE, minsize = 0)
return(vpres)
}
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
inferenceWithYourSignature <- function(mat, net, reg_list, file_name = "") {
g  <- igraph::graph_from_adjacency_matrix(net, weighted=TRUE, mode="undirected")
dataf <- igraph::as_data_frame(g)
#genes <- AnnotationDbi::select(org.Hs.eg.db,
#                               keys = c(unique(dataf$to, dataf$from)),
#                               columns = c("SYMBOL"),
#                               keytype = "ENSEMBL")
#
#dataf$to <- genes$SYMBOL[match(dataf$to, genes$ENSEMBL)]
#dataf$from <- genes$SYMBOL[match(dataf$from, genes$ENSEMBL)]
#dataf <- na.omit(dataf)
print("Data frame from net ok")
genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- dplyr::filter(dataf, dataf[, 1] == g)
df2 <- dplyr::filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
print(length(df_list))
file_txt_path <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj_path <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt_path)) {
file.remove(file_txt_path)
}
if (file.exists(file_adj_path)) {
file.remove(file_adj_path)
}
i <- 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt_path, row.names = FALSE,
col.names = FALSE, quote = FALSE, append = TRUE)
i <- i+1
}
txt_file <- readLines(file_txt_path)
modified_file <- gsub(" ", "\t", txt_file)
adj_file <- file(file_adj_path, "w")
writeLines(modified_file, adj_file)
close(adj_file)
print("file created")
regul <- viper::aracne2regulon(file_adj_path, mat, verbose = FALSE)
vpres <- viper::viper(mat, regul, verbose = FALSE, minsize = 0)
return(vpres)
}
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
file_adj_path
regul <- viper::aracne2regulon("interactors.adj", mat, verbose = FALSE)
regul <- viper::aracne2regulon("interactors.adj", reduced_mat, verbose = FALSE)
reduced_mat
is.matrix(reduced_mat)
?aracne2regulon
View(dl)
regul <- viper::aracne2regulon("interactors.adj", reduced_mat, verbose = FALSE)
regul <- viper::aracne2regulon("interactors.adj", reduced_mat, verbose = FALSE, format = "adj")
regul <- viper::aracne2regulon("interactors.adj", reduced_mat, verbose = TRUE)
getwd()
reduced_mat <- as.data.frame(reduced_mat)
regul <- viper::aracne2regulon("interactors.adj", reduced_mat, verbose = TRUE)
is.data.frame(reduced_mat)
regul <- viper::aracne2regulon("interactors.adj", reduced_mat, verbose = TRUE)
reduced_mat
library(viper)
regul <- aracne2regulon("interactors.adj", reduced_mat, verbose = TRUE)
debug(aracne2regulon)
regul <- aracne2regulon("interactors.adj", reduced_mat, verbose = TRUE)
length(reduced_mat)
reduced_genes %in% rownames(vsd_matrix)
reduced_mat <- vsd_matrix[which(reduced_genes %in% rownames(vsd_matrix)), ]
reduced_mat <- vsd_matrix[which(reduced_genes %in% rownames(vsd_matrix)), ]
reduced_genes %in% rownames(reduced_mat)
genes_indices <- which(reduced_genes %in% rownames(vsd_matrix))
genes_indices
genes_indices <- (reduced_genes %in% rownames(vsd_matrix))
genes_indices
genes_indices <- (rownames(vsd_matrix) %in% reduced_genes)
genes_indices
reduced_mat <- vsd_matrix[genes_indices, ]
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
regul <- aracne2regulon("interactors.adj", reduced_mat, verbose = TRUE)
undebug(aracne2regulon)
regul <- aracne2regulon("interactors.adj", reduced_mat, verbose = TRUE)
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
inferenceWithYourSignature <- function(mat, net, reg_list, file_name = "") {
g  <- igraph::graph_from_adjacency_matrix(net, weighted=TRUE, mode="undirected")
dataf <- igraph::as_data_frame(g)
genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- dplyr::filter(dataf, dataf[, 1] == g)
df2 <- dplyr::filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
file_txt_path <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj_path <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt_path)) {
file.remove(file_txt_path)
}
if (file.exists(file_adj_path)) {
file.remove(file_adj_path)
}
i <- 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt_path, row.names = FALSE,
col.names = FALSE, quote = FALSE, append = TRUE)
i <- i+1
}
txt_file <- readLines(file_txt_path)
modified_file <- gsub(" ", "\t", txt_file)
adj_file <- file(file_adj_path, "w")
writeLines(modified_file, adj_file)
close(adj_file)
regul <- viper::aracne2regulon(file_adj_path, mat, verbose = FALSE)
vpres <- viper::viper(mat, regul, verbose = FALSE, minsize = 0)
return(vpres)
}
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
load("/home/francesca/Scrivania/network2activity/data/vsd_matrix.rda")
load("/home/francesca/Scrivania/network2activity/data/network.rda")
load("/home/francesca/Scrivania/network2activity/data/regulators_list.rda")
non_zero_indices <- which(rowSums(network) > 30)
example_network <- network[non_zero_indices, non_zero_indices]
getwd()
saveRDS(example_network, "/home/francesca/Scrivania/network2activity/data")
saveRDS(example_network, "/home/francesca/Scrivania/network2activity/data/example_network.rda")
genes_ids <- which(colnames(reduced_network) %in% regulators_list)
example_genes <- colnames(reduced_network)[genes_ids]
saveRDS(example_genes, "/home/francesca/Scrivania/network2activity/data/example_genes.rda")
genes_indices <- (rownames(vsd_matrix) %in% reduced_genes)
example_matrix <- vsd_matrix[genes_indices, ]
saveRDS(example_matrix, "/home/francesca/Scrivania/network2activity/data/example_matrix.rda")
load("/home/francesca/Scaricati/network2activity (2)/data/vsd_matrix.rda")
head(vsd_matrix)
load("/home/francesca/Scaricati/network2activity (2)/data/network.rda")
head(network)
non_zero_indices <- which(rowSums(network) > 30)
example_network <- network[c(non_zero_indices, "ADAR", "ADARB1"), (non_zero_indices, "ADAR", "ADARB1")]
example_network <- network[c(non_zero_indices, "ADAR", "ADARB1"), c(non_zero_indices, "ADAR", "ADARB1")]
network["ADAR",]
network["ADARB1",]
non_zero_indices
a <- c(non_zero_indices, "ADAR", "ADARB1")
a
non_zero_indices <- names(which(rowSums(network) > 30))
non_zero_indices
example_network <- network[c(non_zero_indices, "ADAR", "ADARB1"), c(non_zero_indices, "ADAR", "ADARB1")]
a <- c(non_zero_indices, "ADAR", "ADARB1")
a
example_network <- network[a, a]
example_network <- network[a, ]
non_zero_indices <- names(which(rowSums(network) > 30))
example_network <- network[non_zero_indices, ]
non_zero_indices <- na.omit(non_zero_indices)
a <- c(non_zero_indices, "ADAR", "ADARB1")
example_network <- network[non_zero_indices, ]
example_network <- network[a, a]
genes_ids <- which(colnames(example_network) %in% regulators_list)
example_genes <- colnames(example_network)[genes_ids]
example_genes
genes_indices <- (rownames(vsd_matrix) %in% reduced_genes)
example_matrix <- vsd_matrix[genes_indices, ]
example_matrix
vsd_matrix["ADAR",]
vsd_matrix["ADARB1",]
example_matrix["ADARB1",]
example_matrix["ADAR",]
genes_indices <- (rownames(vsd_matrix) %in% example_genes)
example_matrix <- vsd_matrix[genes_indices, ]
example_matrix["ADAR",]
inferenceWithYourSignature <- function(mat, net, reg_list, file_name = "") {
g  <- igraph::graph_from_adjacency_matrix(net, weighted=TRUE, mode="undirected")
dataf <- igraph::as_data_frame(g)
genes_selected <- reg_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- dplyr::filter(dataf, dataf[, 1] == g)
df2 <- dplyr::filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
file_txt_path <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj_path <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt_path)) {
file.remove(file_txt_path)
}
if (file.exists(file_adj_path)) {
file.remove(file_adj_path)
}
i <- 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt_path, row.names = FALSE,
col.names = FALSE, quote = FALSE, append = TRUE)
i <- i+1
}
txt_file <- readLines(file_txt_path)
modified_file <- gsub(" ", "\t", txt_file)
adj_file <- file(file_adj_path, "w")
writeLines(modified_file, adj_file)
close(adj_file)
regul <- viper::aracne2regulon(file_adj_path, mat, verbose = FALSE)
vpres <- viper::viper(mat, regul, verbose = FALSE, minsize = 0)
return(vpres)
}
inferenceWithYourSignature(mat = reduced_mat, net = reduced_network, reg_list = reduced_genes,
file_name = "interactors")
inferenceWithYourSignature(mat = example_mat, net = example_network, reg_list = example_genes,
file_name = "interactors")
inferenceWithYourSignature(mat = example_matrix, net = example_network, reg_list = example_genes,
file_name = "interactors")
vres <- inferenceWithYourSignature(mat = example_matrix, net = example_network, reg_list = example_genes,
file_name = "interactors")
vres["ADAR",]
example_network
example_network["ADAR",]
example_network
example_network["CELSR3",]
example_network["CELSR3"] <- "ADAR"
example_network["CHMP2A"] <- "ADARB1"
vres <- inferenceWithYourSignature(mat = example_matrix, net = example_network, reg_list = example_genes,
file_name = "interactors")
load("/home/francesca/Scaricati/network2activity (2)/data/network.rda")
non_zero_indices <- names(which(rowSums(network) > 30))
non_zero_indices <- na.omit(non_zero_indices)
a <- c(non_zero_indices)
example_network <- network[a, a]
vres <- inferenceWithYourSignature(mat = example_matrix, net = example_network, reg_list = example_genes,
file_name = "interactors")
vres
regul <- aracne2regulon("interactors.adj", example_matrix, verbose = FALSE)
rownames(example_network)
rownames(example_network["CELSR3",]) <- "ADAR"
example_network["CELSR3",]
rownames(example_network["CELSR3",])
rownames(example_network)
rownames(example_network[3,]) <- "ADAR"
rownames(example_network[3,])
rownames(example_network[[3,]])
example_network["CHMP2A",]
load("/home/francesca/Scrivania/network2activity/data/regul_hESC_neurons.rda")
regul_hESC_neurons
genes <- c(names(regul_hESC_neurons$ADAR[["tfmode"]]), names(regul_hESC_neurons$ADARB1[["tfmode"]]),
names(regul_hESC_neurons$ADARB2[["tfmode"]]), "ADAR", "ADARB1", "ADARB2")
prova_net <- network[genes, genes]
genes_ids <- which(colnames(prova_net) %in% regulators_list)
prova_genes <- colnames(prova_net)[genes_ids]
genes_indices <- (rownames(vsd_matrix) %in% prova_genes)
prova_matrix <- vsd_matrix[genes_indices, ]
regul$
vres <- inferenceWithYourSignature(mat = prova_matrix, net = prova_network, reg_list = prova_genes,
file_name = "interactors")
regul$
vres <- inferenceWithYourSignature(mat = prova_matrix, net = prova_net, reg_list = prova_genes,
file_name = "interactors")
vres
View(prova_matrix)
prova_genes
genes_indices <- (rownames(vsd_matrix) %in% prova_genes)
prova_matrix <- vsd_matrix[genes_indices, ]
prova_matrix
regul$
vres <- inferenceWithYourSignature(mat = prova_matrix, net = prova_net, reg_list = prova_genes,
file_name = "interactors")
vres
vres["ADAR",]
regul <- aracne2regulon("interactors.adj", prova_matrix, verbose = FALSE)
regul$ADAR
vpres <- viper(prova_matrix, regul[c("ADAR", "ADARB1", "ADARB2")], verbose = FALSE, minsize = 0)
vpres
example_network <- network[genes, genes]
example_network
saveRDS(example_network, "/home/francesca/Scrivania/network2activity/data/example_network.rda")
genes_ids <- which(colnames(example_network) %in% regulators_list)
example_genes <- colnames(example_network)[genes_ids]
saveRDS(example_genes, "/home/francesca/Scrivania/network2activity/data/example_genes.rda")
genes_indices <- (rownames(vsd_matrix) %in% example_genes)
example_matrix <- vsd_matrix[genes_indices, ]
saveRDS(example_matrix, "/home/francesca/Scrivania/network2activity/data/example_matrix.rda")
genes_selected <- unique(c(genes, "ADAR", "ADARB1", "ADARB2"))
genes_selected
load("/home/francesca/Scrivania/network2activity/data/regulators_list.rda")
regulators_list["ADAR"]
regulators_list["ADARB1"]
regulators_list["AHR"]
regulators_list[["AHR"]]
"AHR" %in% regulators_list
"ADAR" %in% regulators_list
"ADARB1" %in% regulators_list
regulators_list
regulators_list[which("ADARB1" %in% regulators_list)]
regulators_list[which("ADARB1" %in% regulators_list)]
?viper
read.table("/home/francesca/Scrivania/pacchetto/rstudio-export/vsd_mm2.5.txt",
header = TRUE)
mat <- read.table("/home/francesca/Scrivania/pacchetto/rstudio-export/vsd_mm2.5.txt",
header = FALSE)
mat <- read.table("/home/francesca/Scrivania/pacchetto/rstudio-export/vsd_mm2.5.txt",
header = TRUE, sep = "\t")
mat
net <- readRDS("/home/francesca/Scrivania/pacchetto/rstudio-export/network.RDS")
yourSignature <- function(mat, net, file_name = "") {
g  <- graph_from_adjacency_matrix(net, weighted = TRUE, mode = "undirected")
dataf <- as_data_frame(g)
genes_selected <- regulators_list
df_new <- data.frame()
for (g in genes_selected) {
df1 <- filter(dataf, dataf[, 1] == g)
df2 <- filter(dataf, dataf[, 2] == g)
df2 <- df2[, c(2, 1, 3)]
colnames(df2) <- c("from", "to", "weight")
df3 <- rbind(df1, df2)
df_new <- rbind(df_new, df3)
}
df_list <- split(df_new, df_new$from)
df_list <- lapply(df_list, function(dataf) {dataf[, -1]})
file_txt_path <- file.path(getwd(), paste0(file_name, ".txt"))
file_adj_path <- file.path(getwd(), paste0(file_name, ".adj"))
if (file.exists(file_txt_path)) {
file.remove(file_txt_path)
}
if (file.exists(file_adj_path)) {
file.remove(file_adj_path)
}
i <- 1
while (i < length(df_list)) {
a <- c(names(df_list[i]), paste(df_list[[i]]$to, df_list[[i]]$weight))
write.table(x = rbind(a), file = file_txt_path, row.names = FALSE,
col.names = FALSE, quote = FALSE, append = TRUE)
i <- i+1
}
txt_file <- readLines(file_txt_path)
modified_file <- gsub(" ", "\t", txt_file)
adj_file <- file(file_adj_path, "w")
writeLines(modified_file, adj_file)
close(adj_file)
regulon <- aracne2regulon(file_adj_path, mat, verbose = FALSE)
vpres <- viper(mat, regulon[c("ADAR", "ADARB1")], verbose = FALSE,
minsize = 0)
return(vpres)
}
library(AnnotationDbi)
library(org.Mm.eg.db)
columns(org.Mm.eg.db)
org.Mm.eg.db["PFAM"]
org.Mm.eg.db[["PFAM"]]
mmKeys <- keys(org.Mm.eg.db, "Mus.musculus")
